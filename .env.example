# -----------------------------------------------------------------------------
# GLPI API CONFIGURATION
# -----------------------------------------------------------------------------
# The base URL for your GLPI instance's REST API.
# Example: GLPI_BASE_URL=https://glpi.yourcompany.com/apirest.php
GLPI_BASE_URL=
# GLPI Application Token (required for API access).
GLPI_APP_TOKEN=
# GLPI User Token (can be used instead of username/password).
GLPI_USER_TOKEN=
# Alternatively, provide username and password.
GLPI_USERNAME=
GLPI_PASSWORD=

# -----------------------------------------------------------------------------
# DATABASE (PostgreSQL)
# These values are used by the backend and the docker-compose 'db' service.
# -----------------------------------------------------------------------------
DB_HOST=db
DB_PORT=5432
# Host port bound to the PostgreSQL container (maps to container's port 5432).
# Adjust if 5432 is occupied.
HOST_DB_PORT=5432
DB_NAME=glpi_dashboard
DB_USER=user
DB_PASSWORD=password

# -----------------------------------------------------------------------------
# CACHE (Redis)
# -----------------------------------------------------------------------------
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_TTL_SECONDS=3600

# -----------------------------------------------------------------------------
# FRONTEND CONFIGURATION
# -----------------------------------------------------------------------------
# This is the URL the BROWSER will use to connect to the backend API.
# For local development with docker-compose, this should be http://localhost:8000
# For production, this should be your public API endpoint.
# Example: NEXT_PUBLIC_API_BASE_URL=https://cau.ppiratini.intra.rs.gov.br/api
NEXT_PUBLIC_API_BASE_URL=http://localhost:8000

# (Optional) URL for the Grafana Faro collector for frontend observability.
# NEXT_PUBLIC_FARO_URL=http://localhost:1234/collect

# -----------------------------------------------------------------------------
# DEVELOPMENT & DEBUGGING
# -----------------------------------------------------------------------------
# Set to "true" to use mock data instead of calling the GLPI API.
# Useful for frontend development without a running backend/GLPI.
USE_MOCK_DATA=false

# Log level for the backend application.
LOG_LEVEL=INFO

# Allowed CORS origins when APP_ENV=production
# Example: API_CORS_ALLOW_ORIGINS=https://dashboard.example.com
API_CORS_ALLOW_ORIGINS=

# Allowed HTTP methods in production
# Example: API_CORS_ALLOW_METHODS=GET,POST
API_CORS_ALLOW_METHODS=GET,HEAD,OPTIONS

# -----------------------------------------------------------------------------
# BACKEND / WORKER SETTINGS
# -----------------------------------------------------------------------------
# Optional token required in the X-API-Token header when accessing the worker
# API. Leave empty to disable authentication.
DASHBOARD_API_TOKEN=

# Verify TLS certificates when communicating with GLPI (set to "false" to ignore
# invalid certificates).
VERIFY_SSL=true

# HTTP client timeout in seconds
CLIENT_TIMEOUT_SECONDS=30

# Path to the Markdown file listing known errors consumed by the worker.
KNOWLEDGE_BASE_FILE=docs/knowledge_base_errors.md

# Cache backend type. Use "redis" or "simple" for in-memory caching.
CACHE_TYPE=redis

# Runtime environment: development or production
APP_ENV=development

# Outbound proxy settings (optional). Uncomment to route traffic
# through a corporate proxy if direct internet access is blocked.
# HTTP_PROXY=http://proxy.company.com:8080
# HTTPS_PROXY=http://proxy.company.com:8080
# Note: In shell environments, you can use HTTPS_PROXY=$HTTP_PROXY to inherit the HTTP_PROXY value.
#       However, this syntax may not work in all deployment methods. Consider using an explicit URL.
HTTP_PROXY=
HTTPS_PROXY=

# LangSmith tracing configuration (optional)
LANGCHAIN_TRACING_V2=false
LANGCHAIN_API_KEY=
LANGCHAIN_PROJECT=glpi-dashboard
