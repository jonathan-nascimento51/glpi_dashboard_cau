services:
  postgres:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: glpi_dashboard
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d glpi_dashboard"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  initdb:
    build: .
    command: python scripts/init_db.py
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  worker:
    build: .
    command: python worker.py
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
    ports:
      - "8000:8000"
    depends_on:
      initdb:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD","curl","--fail","http://localhost:8000/health/glpi"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: on-failure

  dash:
    build: .
    command: python main.py
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
      DASH_PORT: 8050
    ports:
      - "8080:8050"  # porta externa -> 8080 evita conflito com WSL
    depends_on:
      initdb:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
  redis_data:
