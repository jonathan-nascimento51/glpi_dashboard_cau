name: glpi_dashboard_cau
services:
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    env_file:
      - .env
      - ./src/frontend/react_app/.env
      - .env.example
    environment:
      PYTHONPATH: /app/src
      LOG_LEVEL: DEBUG
    depends_on:
      - redis
      - db
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      start_period: 60s
      retries: 3

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    restart: always
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 15s
      timeout: 3s
      start_period: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: src/frontend/react_app/Dockerfile
    depends_on:
      - backend
    env_file:
      - ./src/frontend/react_app/.env
      - .env.example
    environment:
      # (opcional, vocÃª pode sobrescrever aqui)
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      start_period: 45s
      retries: 3

  db:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER_FILE: ${DB_USER_FILE:-}
      DB_PASSWORD_FILE: ${DB_PASSWORD_FILE:-}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 15s
      timeout: 5s
      start_period: 30s
      retries: 3

volumes:
  db_data:
