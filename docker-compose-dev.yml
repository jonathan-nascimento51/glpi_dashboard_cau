services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        INSTALL_PLAYWRIGHT: "false"
    command: python worker.py --port 8000
    volumes:
      - ./src:/app/src
      - playwright-cache:/root/.cache/ms-playwright
    env_file: .env
    environment:
      PYTHONPATH: /app/src
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/glpi"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"

  frontend:
    build:
      context: ./frontend
    command: npm run dev
    env_file: ./frontend/.env
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "55432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  initdb:
    image: postgres:15-alpine
    volumes:
      - ./scripts/create_app_user.sh:/create_app_user.sh:ro
    entrypoint: ["sh", "/create_app_user.sh"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.54.0
    platform: linux/amd64
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--log.level=warn"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      backend:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_LOG_LEVEL=warn
      - GF_PLUGINS_BACKGROUNDINSTALLER_DISABLED=true
      # Allow loading of unsigned plugins if needed
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=${GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS:-}
      - GF_DATABASE_SQLITE_ENABLE_WAL=true
    ports:
      - "3001:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      prometheus:
        condition: service_healthy

volumes:
  db_data:
  playwright-cache:
