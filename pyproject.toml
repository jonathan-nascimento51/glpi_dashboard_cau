[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

[project]
name = "glpi-dashboard-cau"
version = "0.1.0"
description = "Service desk dashboard for GLPI"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
dependencies = [
    "dash>=2.17",
    "dash-bootstrap-components>=1.3.1",
    "pandas>=2.2",
    "requests>=2.32",
    "python-dotenv>=1.0",
    "fastapi>=0.110",
    "uvicorn>=0.29",
    "strawberry-graphql>=0.223",
    "httpx==0.27.2",
    "rich-click>=1.6",
    "aiohttp",
    "aiohttp_retry",
    "APScheduler",
    "SQLAlchemy==2.0.25",
    "asyncpg",
    "redis",
    "Flask-Caching>=2.1",
    "flask-compress",
    "langgraph>=0.0.22",
    "opentelemetry-api>=1.24",
    "opentelemetry-sdk>=1.24",
    "opentelemetry-exporter-otlp-proto-http>=1.24",
    "opentelemetry-instrumentation-fastapi>=0.55b1",
    "opentelemetry-instrumentation-logging>=0.55b1",
    "gql[httpx]>=3.5",
    "dishka>=1.6",
    "pydantic>=2.7",
    "pydantic-settings>=2.2",
    "tenacity>=8.2",
    "purgatory>=3.0",
    "loguru>=0.7",
    "structlog>=24.1",
    "orjson>=3.10",
    "arq>=0.26",
    "pybreaker>=0.20",
    "prometheus-client",
    "prometheus-fastapi-instrumentator>=6.0",
    "plotly>=5.0",
    "py-glpi"
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-asyncio==1.0.0",
    "flake8==4.0.1",
    "mypy==0.910",
    "black==25.1.0",
    "isort",
    "ruff",
    "pytest-mock==3.14.1",
    "types-requests",
    "types-redis",
    "pytest-httpx==0.30.0",
    "pydantic-to-typescript",
    "pre-commit",
    "requests-mock",
    "libcst",
    "rope"
]
full-tests = [
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-instrumentation-logging",
    "opentelemetry-instrumentation-redis",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-aiohttp-client",
    "testcontainers",
    "playwright",
    "dash[testing]",
    "pact-python",
    "fakeredis",
    "libcst",
    "pytest-asyncio"
]

[project.scripts]
glpi-worker = "worker:main"
glpi-dashboard = "dashboard_app:main"
glpi-tools = "glpi_tools.__main__:cli"

[tool]
pdm = { }

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["app*", "tests*", "scripts*", "examples*", "labs*"]

[tool.mypy]
python_version = "3.10"
    ignore_missing_imports = true
follow_imports = "silent"
    no_implicit_optional = false
    strict_optional = false
    warn_unused_configs = true
    warn_redundant_casts = true
    warn_unused_ignores = true
    warn_no_return = true
    warn_unreachable = true
    warn_return_any = false
    check_untyped_defs = false
    disallow_untyped_calls = false
    disallow_untyped_defs = false
    disallow_incomplete_defs = false
    disallow_untyped_decorators = false
    disallow_subclassing_any = false
    disallow_any_unimported = false
    disallow_any_expr = false
    disallow_any_decorated = false
    disallow_any_explicit = false
    disallow_any_generics = false
    allow_untyped_globals = true
    allow_redefinition = true
    local_partial_types = false
    implicit_reexport = true
    strict_equality = true
    show_error_context = false
    show_column_numbers = false
    show_error_codes = true
exclude = ["docs", "test", "tests"]

[tool.ruff]
target-version = "py310"
    line-length = 120
    indent-width = 4
extend-exclude = ["docs", "test", "tests"]

[tool.ruff.lint]
select = ["F", "E"]
extend-select = ["W", "C90", "I", "N", "B", "A", "C4", "PERF", "RUF"]
ignore = ["I001"]
fixable = ["ALL"]
unfixable = []
      preview = true
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
        force-single-line = true
        force-sort-within-sections = false
        lines-after-imports = 2
known-first-party = []
known-local-folder = []
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.mccabe]
        max-complexity = 24

[tool.ruff.lint.pycodestyle]
        ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
        allow-star-arg-any = true
        ignore-fully-untyped = true

[tool.ruff.lint.pylint]
        max-args = 5
        max-branches = 12
        max-locals = 15
        max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
      skip-magic-trailing-comma = false
line-ending = "auto"
      preview = false
      docstring-code-format = true

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
target-version = ["py310"]
    line-length = 120
    skip-string-normalization = true
    skip-magic-trailing-comma = true
force-exclude = """
/(
    | docs
    | setup.py
)/
"""

[tool.isort]
    py_version = 310
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
default_section = "THIRDPARTY"
known_third_party = []
known_first_party = []
known_local_folder = []
    multi_line_output = 3
    include_trailing_comma = true
    force_grid_wrap = 0
    use_parentheses = true
    ensure_newline_before_comments = true
    line_length = 120
    split_on_trailing_comma = true
    lines_after_imports = 2
    force_single_line = true
skip_glob = ["docs/*", "setup.py"]
    filter_files = true
